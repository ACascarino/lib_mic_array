void fn(audio_index, audio_pointer, frame_min, frame_max){
        samples = apply_windowing_function(audio_index, fir_samples);
        update_min_max(frame_min, frame_max, samples);
        if(bitrev)
            index = bit_reverse(audio_index, frame_size_log2);
        //audio_pointer[index] = {samples[0], samples[1]};
        //audio_pointer[index + 1<<frame_size_log2] = {samples[2], samples[3]};
}

void bar(unsigned audio_index){

    fn(audio_index, audio_pointer_new, frame_min_new, frame_max_new);

    if(overlapping_frame_off){
        //reset the fir accumulators
        audio_index++;
        if(audio_index == (1<<frame_size_log2)){
           //metadata = {frame_min_new, frame_max_new, frame_number++};
           audio_pointer_new = buffer_exchange(audio_pointer_new);
           audio_index = 0;
           frame_max_new = 0;
           frame_min_new = 0;
        }
    } else {

        audio_index = (1<<frame_size_log2)/2 + audio_index;
        fn(audio_index, audio_pointer_old, frame_min_old, frame_max_old);

        //reset the fir accumulators
        audio_index++;
        if(audio_index == (1<<frame_size_log2)/2){

           //old_metadata = {frame_max_old, frame_min_old, frame_number++};
           t = buffer_exchange(audio_pointer_old);
           audio_pointer_old = audio_pointer_new;
           audio_pointer_new = t;
           audio_index = 0;

           frame_max_old = frame_max_new;
           frame_min_old = frame_min_new;
           frame_max_new = 0;
           frame_min_new = 0;
        }

    }

}



void foo(unsigned audio_index){

    copy_fir_outputs();

    if(overlapping_frame_on){

        samples = apply_windowing_function(audio_index, samples);
        update_min_max(frame_min_new, frame_max_new, samples);
        if(bitrev)
            index = bit_reverse(audio_index, frame_size_log2);
        //audio_pointer_new[index] = {samples[0], samples[1]};
        //audio_pointer_new[index + 1<<frame_size_log2] = {samples[2], samples[3]};

        audio_index_old = (1<<frame_size_log2)/2 + audio_index;

        samples = apply_windowing_function(audio_index_old, samples);
        update_min_max(frame_min_old, frame_max_old, samples);
        if(bitrev)
            index = bit_reverse(audio_index_old, frame_size_log2);
        //audio_pointer_old[index] = {samples[0], samples[1]};
        //audio_pointer_old[index + 1<<frame_size_log2] = {samples[2], samples[3]};

        audio_index++;
        if(audio_index == (1<<frame_size_log2)/2){

           //old_metadata = {frame_max_old, frame_min_old, frame_number++};
           t = buffer_exchange(audio_pointer_old);
           audio_pointer_old = audio_pointer_new;
           audio_pointer_new = t;
           audio_index = 0;

           frame_max_old = frame_max_new;
           frame_min_old = frame_min_new;
           frame_max_new = 0;
           frame_min_new = 0;
        }

    } else {
        samples = apply_windowing_function(audio_index, samples);
        update_min_max(frame_min_new, frame_max_new, samples);
        if(bitrev)
           index = bit_reverse(audio_index, frame_size_log2);
        //audio_pointer_new[index] = {samples[0], samples[1]};
        //audio_pointer_new[index + 1<<frame_size_log2] = {samples[2], samples[3]};

        audio_index++;
        if(audio_index == (1<<frame_size_log2)){
           //metadata = {frame_min_new, frame_max_new, frame_number++};
            audio_pointer_new = buffer_exchange(audio_pointer_new);
           audio_index = 0;
           frame_max_new = 0;
           frame_min_new = 0;
        }
    }

}





/*
        //move all the fir outputs back into the second stage outputs
        ldc t, 0
        ldaw r1, sp[S_SECOND_STAGE_OUTPUT_OFFSET]
        ldw r2, r0[S_SUM_0+1]
        std t, t, r0[S_D_SUM_0]
        stw r2, r1[S_SECOND_STAGE_OUTPUT_0]
        ldw r2, r0[S_SUM_1+1]
        std t, t, r0[S_D_SUM_1]
        stw r2, r1[S_SECOND_STAGE_OUTPUT_1]
        ldw r2, r0[S_SUM_2+1]
        std t, t, r0[S_D_SUM_2]
        stw r2, r1[S_SECOND_STAGE_OUTPUT_2]
        ldw r2, r0[S_SUM_3+1]
        std t, t, r0[S_D_SUM_3]
        stw r2, r1[S_SECOND_STAGE_OUTPUT_3]
*/
        stw t, r0[S_FIR_PHASE]  //reset the FIR phase

        update_min_max:
        MIN_MAX(S_FRAME_MIN_0, S_FRAME_MAX_0, 0)

        //multiply the data values by the window function
        ldaw r0, sp[S_SETTINGS_OFFSET]
        ldw r1, r0[S_WINDOWING_ENABLED]
        bf r1, no_windowing
            ldaw r0, sp[S_FRAME_OFFSET]
            ldw r3, r0[S_FRAME_SIZE_LOG2]
            {mkmsk r4, r3; sub r3, r3, 1}
            {shr r3, r2, r3;ldw r2, r0[S_AUDIO_POINTER_0_INDEX]}
            bf r3, load_window_coef
            sub r2, r4, r2
            load_window_coef:
            ldw r1, r1[r2]  //r1 is now the windowing coefficient
            ldaw r0, sp[S_SECOND_STAGE_OUTPUT_OFFSET]
            ldd r2, r3, r0[S_D_SECOND_STAGE_OUTPUT_01]
            {ldc r4, 0; ldc r5, 0}
            maccs r4, r5, r1, r2
            {ldc r2, 0; ldc r5, 0}
            maccs r5, r3, r1, r3
            std r4, r5, r0[S_D_SECOND_STAGE_OUTPUT_01]
            ldd r2, r3, r0[S_D_SECOND_STAGE_OUTPUT_23]
            {ldc r4, 0; ldc r5, 0}
            maccs r4, r5, r1, r2
            {ldc r2, 0; ldc r5, 0}
            maccs r5, r3, r1, r3
            std r2, r3, r0[S_D_SECOND_STAGE_OUTPUT_23]
        no_windowing:

        ldaw r0, sp[S_FRAME_OFFSET]
        ldw r2, r0[S_FRAME_SIZE_LOG2]
        ldaw r1, sp[S_SETTINGS_OFFSET]
        ldw r1, r1[S_INDEX_BITREVERSING_ENABLED]
        bf r1, write_out_audio_frames
        write_out_fft_frames:
            ldaw r5, sp[S_SECOND_STAGE_OUTPUT_OFFSET]
            {ldw r1, r0[S_AUDIO_POINTER_0_INDEX]; ldc r3, 32}
            {bitrev r1, r1; sub r3, r3, r2}
            {shr r1, r1, r3;ldw r4, r0[S_AUDIO_POINTER_0]}
            ldd r3, t, r5[S_D_SECOND_STAGE_OUTPUT_01]
            std r3, t, r4[r1]
            {ldc r3, 1;nop}
            {shl r3, r3, r2;nop}
            {add r1, r1, r3;nop}
            ldd r3, t, r5[S_D_SECOND_STAGE_OUTPUT_23]
            std r3, t, r4[r1]
            bu inc_audio_index

        write_out_audio_frames:
            ldaw r5, sp[S_SECOND_STAGE_OUTPUT_OFFSET]
            ldd r3, r4, r0[S_D_AUDIO_POINTER_AND_INDEX_0]
            ldd r1, t, r5[S_D_SECOND_STAGE_OUTPUT_01]
            ldaw r4, r4[r3]
            {ldc r3, 1; stw t, r4[0]}
            {shl r3, r3, r2; nop}
            stw r1, r4[r3]
            add r3, r3, r3
            ldd r1, t, r5[S_D_SECOND_STAGE_OUTPUT_23]
            stw t, r4[r3]
            {ldc r3, 3; nop}
            shl r3, r3, r2
            stw r1, r4[r3]

    inc_audio_index:
        bf r2, exchange_buffers
            //reset the index if we have completed a frame
            ldw r1, r0[S_AUDIO_POINTER_0_INDEX]
            {add r1, r1, 1;}
            zext r1, r2
            stw r1, r0[S_AUDIO_POINTER_0_INDEX];
            bt r1, input_sample_7
    exchange_buffers:
        ldw r1, r0[S_C_OUTPUT]
        outct res[r1], 8 //WARNING: do not change this

        inct r2, res[r1]
        //if the incomming token is EXCHANGE_BUFFERS then do that
        //if the incomming token is CONFIGURE_DECIMATOR then do that

        eq r3, r2, CONFIGURE_DECIMATOR
        bt r3, configure
        eq r3, r2, EXCHANGE_BUFFERS
        bt r3, do_the_exchange

        do_the_exchange:

        save_the_metadata:
        {ldd r3, r4, r0[S_D_FRAME_MIN_MAX_0]}
        ldw r5, r0[S_METADATA_POINTER_0]
        std r3, r4, r5[0];
        ldw r3, r0[S_FRAME_NUMBER]
        {stw r3, r5[2]; add r3, r3, 1}
        stw r3, r0[S_FRAME_NUMBER]      //and save the new frame number back

        get_the_new_data_pointer:
        in r2, res[r1]
        {stw r2, r0[S_AUDIO_POINTER_0]}
        get_the_new_metadata_pointer:
        in r1, res[r1]
        {ldc r1, 0; stw r1, r0[S_METADATA_POINTER_0]}
        //reset the min and max vals for the frame
        {stw r1, r0[S_FRAME_MAX_0]}
        {stw r1, r0[S_FRAME_MIN_0]}






